commands:
  build_and_deploy:
    description: "Build/Test and Deploy SingularityNET Services"
    parameters:
      domain:
        type: string
        default: ""
      ssh_user_env_var:
        type: string
        default: ""
      ssh_host_env_var:
        type: string
        default: ""
      infura_api_key:
        type: string
        default: ""
      daemon_pk:
        type: string
        default: ""
      docker_nvidia:
        type: boolean
        default: false
      docker_image_name:
        type: string
        default: ""
      docker_container_name:
        type: string
        default: ""
      docker_etcd_host_dir:
        type: string
        default: ""
      docker_etcd_container_dir:
        type: string
        default: ""
      docker_mount_volumes:
        type: boolean
        default: false
      docker_mount_src:
        type: string
        default: ""
      docker_mount_dest:
        type: string
        default: ""
    steps:
      - run:
          name: Setting Up
          command: |
            export SSH_USER=<< parameters.ssh_user_env_var >>
            export SSH_HOST=<< parameters.ssh_host_env_var >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}"/"${CIRCLE_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            echo "Setting Up..."
            echo $(.circleci/check_md5.sh) >> docker_rebuild
            echo "FILES_CHANGED=$(cat docker_rebuild)"

      - run:
          name: Removing old Docker Container (Previous Builds)
          command: |
            export SSH_USER=<< parameters.ssh_user_env_var >>
            export SSH_HOST=<< parameters.ssh_host_env_var >>
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}"/"${CIRCLE_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            echo "Removing old Container (from previous builds)..."
            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<< EOF
              docker stop ${PROD_TAG}${DOCKER_CONTAINER_NAME}_old || true
              docker rm ${PROD_TAG}${DOCKER_CONTAINER_NAME}_old || true
            EOF

      - run:
          name: Building
          command: |
            echo "=========================================== Build Configs ==========================================="
            export SSH_USER=<< parameters.ssh_user_env_var >>
            export SSH_HOST=<< parameters.ssh_host_env_var >>
            export DOCKER_NVIDIA=<< parameters.docker_nvidia >>
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            export DOCKER_MOUNT_VOLUMES=<< parameters.docker_mount_volumes >>
            export DOCKER_MOUNT_SRC=<< parameters.docker_mount_src >>
            export DOCKER_MOUNT_DEST=<< parameters.docker_mount_dest >>
            export ETCD_HOST_DIR=<< parameters.docker_etcd_host_dir >>
            export ETCD_CONTAINER_DIR=<< parameters.docker_etcd_container_dir >>
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}"/"${CIRCLE_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            echo            git_user  : ${CIRCLE_PROJECT_USERNAME}
            echo            git_repo  : ${CIRCLE_PROJECT_REPONAME}
            echo            git_branch: ${CIRCLE_BRANCH}
            echo SSH_USER             : ${SSH_USER}
            echo SSH_HOST             : ${SSH_HOST}
            echo DOCKER_NOCACHE       : ${DOCKER_NOCACHE}
            echo DOCKER_NVIDIA        : ${DOCKER_NVIDIA}
            echo DOCKER_IMAGE_NAME    : ${DOCKER_IMAGE_NAME}
            echo DOCKER_CONTAINER_NAME: ${DOCKER_CONTAINER_NAME}
            echo DOCKER_MOUNT_VOLUMES : ${DOCKER_MOUNT_VOLUMES}
            echo DOCKER_MOUNT_SRC     : ${DOCKER_MOUNT_SRC}
            echo DOCKER_MOUNT_DEST    : ${DOCKER_MOUNT_DEST}
            echo "====================================================================================================="
            DOCKER_IMAGE_EXISTS=`ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} docker images -q ${DOCKER_IMAGE_NAME}:${CIRCLE_PROJECT_USERNAME}`
            FILES_CHANGED=`cat docker_rebuild`
            echo DOCKER_IMAGE_EXISTS=${DOCKER_IMAGE_EXISTS}
            echo FILES_CHANGED=${FILES_CHANGED}
            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<< EOF
              if [ "$DOCKER_IMAGE_EXISTS" = "" ] || [ "$FILES_CHANGED" != 0 ]; then
                echo "Building..."
                docker build \
                  --build-arg git_owner=${CIRCLE_PROJECT_USERNAME} \
                  --build-arg git_repo=${CIRCLE_PROJECT_REPONAME} \
                  --build-arg git_branch=${CIRCLE_BRANCH} \
                  $([ "${DOCKER_NOCACHE}" = "true" ] && echo "--no-cache" || echo "") \
                  -t ${DOCKER_IMAGE_NAME}:${CIRCLE_PROJECT_USERNAME} https://raw.githubusercontent.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/${SERVICE_DIR}/Dockerfile
              else
                echo "Not Building..."
              fi
            EOF

      - run:
          name: Running new Docker Container
          command: |
            echo "============================================ Run Configs ============================================"
            export SSH_USER=<< parameters.ssh_user_env_var >>
            export SSH_HOST=<< parameters.ssh_host_env_var >>
            export INFURA_API_KEY=<< parameters.infura_api_key >>
            export PVT_KEY_FOR_METERING=<< parameters.daemon_pk >>
            export DOCKER_NVIDIA=<< parameters.docker_nvidia >>
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            export DOCKER_MOUNT_VOLUMES=<< parameters.docker_mount_volumes >>
            export DOCKER_MOUNT_SRC=<< parameters.docker_mount_src >>
            export DOCKER_MOUNT_DEST=<< parameters.docker_mount_dest >>
            export ETCD_HOST_DIR=<< parameters.docker_etcd_host_dir >>
            export ETCD_CONTAINER_DIR=<< parameters.docker_etcd_container_dir >>
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}"/"${CIRCLE_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            echo            git_user  : ${CIRCLE_PROJECT_USERNAME}
            echo            git_repo  : ${CIRCLE_PROJECT_REPONAME}
            echo            git_branch: ${CIRCLE_BRANCH}
            echo SSH_USER             : ${SSH_USER}
            echo SSH_HOST             : ${SSH_HOST}
            echo DOCKER_NOCACHE       : ${DOCKER_NOCACHE}
            echo DOCKER_NVIDIA        : ${DOCKER_NVIDIA}
            echo DOCKER_IMAGE_NAME    : ${DOCKER_IMAGE_NAME}
            echo DOCKER_CONTAINER_NAME: ${DOCKER_CONTAINER_NAME}
            echo DOCKER_MOUNT_VOLUMES : ${DOCKER_MOUNT_VOLUMES}
            echo DOCKER_MOUNT_SRC     : ${DOCKER_MOUNT_SRC}
            echo DOCKER_MOUNT_DEST    : ${DOCKER_MOUNT_DEST}
            echo "====================================================================================================="
            echo "Running new Container..."
            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<<-EOF
                  docker stop ${PROD_TAG}${DOCKER_CONTAINER_NAME} || true
                  docker rename ${PROD_TAG}${DOCKER_CONTAINER_NAME} ${PROD_TAG}${DOCKER_CONTAINER_NAME}_old || true
                  docker run \
                  $([ "${DOCKER_NVIDIA}" = "true" ] && echo "--runtime=nvidia" || echo "") \
                  --name ${PROD_TAG}${DOCKER_CONTAINER_NAME} \
                  --restart unless-stopped \
                  -e INFURA_API_KEY=${INFURA_API_KEY} \
                  -e PVT_KEY_FOR_METERING=${PVT_KEY_FOR_METERING} \
                  $([ "${DOCKER_DEPLOY}" = "true" ] && echo "-p ${SNETD_PORT_MAINNET}:${SNETD_PORT_MAINNET}" || echo "") \
                  $([ "${DOCKER_DEPLOY}" = "true" ] && echo "-p ${SNETD_PORT_ROPSTEN}:${SNETD_PORT_ROPSTEN}" || echo "") \
                  -v ~/${CERTS_DIR}:/opt/singnet/.certs \
                  $([ "${DOCKER_DEPLOY}" = "true" ] && echo "-v ~/${ETCD_HOST_DIR}:/${ETCD_CONTAINER_DIR}" || echo "") \
                  $([ "${DOCKER_MOUNT_VOLUMES}" = "true" ] && echo "-v ${DOCKER_MOUNT_SRC}:${DOCKER_MOUNT_DEST}" || echo "") \
                  -tdi ${DOCKER_IMAGE_NAME}:${CIRCLE_PROJECT_USERNAME} \
                  bash -c "git fetch;git checkout ${CIRCLE_BRANCH};git pull;sh buildproto.sh;${SERVICE_RUN_COMMAND}"
            EOF

      - run:
          name: Testing local
          no_output_timeout: 60m
          command: |
            export SSH_USER=<< parameters.ssh_user_env_var >>
            export SSH_HOST=<< parameters.ssh_host_env_var >>
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}"/"${CIRCLE_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<< EOF
              docker exec -i ${PROD_TAG}${DOCKER_CONTAINER_NAME} bash -c "${SERVICE_TEST_COMMAND}"
            EOF

version: 2.1
jobs:
  cntk-image-recon:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: cntk-image-recon
      SERVICE_DIR: services/cntk-image-recon
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: source '/cntk/activate-cntk';python3 run_image_recon_service.py --ssl
      SERVICE_TEST_COMMAND: sleep 20;source '/cntk/activate-cntk';python3 test_image_recon_service.py auto
      SNETD_PORT_MAINNET: 7004
      SNETD_PORT_ROPSTEN: 7054
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_CNTK_IMAGE_RECON}
          ssh_user_env_var: ${SSH_USER_CNTK_IMAGE_RECON}
          ssh_host_env_var: ${SSH_HOST_CNTK_IMAGE_RECON}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_CNTK_IMAGE_RECON}
          docker_nvidia: true
          docker_image_name: cntk_image_recognition
          docker_container_name: CNTK_IMAGE_RECON
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  deepfakes-faceswap:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: deepfakes-faceswap
      SERVICE_DIR: services/deepfakes-faceswap
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3 run_deepfakes_faceswap_service.py --ssl
      SERVICE_TEST_COMMAND: sleep 20;python3 test_deepfakes_faceswap_service.py auto
      SNETD_PORT_MAINNET: 7060
      SNETD_PORT_ROPSTEN: 7061-7062
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_DEEPFAKES_FACESWAP}
          ssh_user_env_var: ${SSH_USER_DEEPFAKES_FACESWAP}
          ssh_host_env_var: ${SSH_HOST_DEEPFAKES_FACESWAP}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_DEEPFAKES_FACESWAP}
          docker_mount_volumes: true
          docker_mount_src: ~/storage
          docker_mount_dest: /opt/storage
          docker_nvidia: true
          docker_image_name: deepfakes_faceswap
          docker_container_name: DEEPFAKES_FACESWAP
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  i3d-video-action-recognition:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: i3d-video-action-recognition
      SERVICE_DIR: services/i3d-video-action-recognition
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3 run_video_action_recon_service.py --ssl
      SERVICE_TEST_COMMAND: sleep 20;python3 test_video_action_recon_service.py auto
      SNETD_PORT_MAINNET: 7005
      SNETD_PORT_ROPSTEN: 7055
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_I3D_VIDEO_ACTION_RECON}
          ssh_user_env_var: ${SSH_USER_I3D_VIDEO_ACTION_RECON}
          ssh_host_env_var: ${SSH_HOST_I3D_VIDEO_ACTION_RECON}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_I3D_VIDEO_ACTION_RECON}
          docker_nvidia: true
          docker_image_name: i3d_video_action_recognition
          docker_container_name: I3D_VIDEO_ACTION_RECON
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  places365-scene-recognition:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: places365-scene-recognition
      SERVICE_DIR: services/places365-scene-recognition
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3 run_scene_recognition_service.py --ssl
      SERVICE_TEST_COMMAND: sleep 20;python3 test_scene_recognition_service.py auto
      SNETD_PORT_MAINNET: 7019
      SNETD_PORT_ROPSTEN: 7079
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_PLACES365_SCENE_RECOGNITION}
          ssh_user_env_var: ${SSH_USER_PLACES365_SCENE_RECOGNITION}
          ssh_host_env_var: ${SSH_HOST_PLACES365_SCENE_RECOGNITION}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_PLACES365_SCENE_RECOGNITION}
          docker_nvidia: true
          docker_image_name: places365_scene_recognition
          docker_container_name: PLACES365_SCENE_RECOGNITION
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  pneumonia-diagnosis:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: pneumonia-diagnosis
      SERVICE_DIR: services/pneumonia-diagnosis
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3 run_pneumonia_diagnosis_service.py --ssl
      SERVICE_TEST_COMMAND: sleep 20;python3 test_pneumonia_diagnosis_service.py auto
      SNETD_PORT_MAINNET: 7072
      SNETD_PORT_ROPSTEN: 7062
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_PNEUMONIA_DIAGNOSIS}
          ssh_user_env_var: ${SSH_USER_PNEUMONIA_DIAGNOSIS}
          ssh_host_env_var: ${SSH_HOST_PNEUMONIA_DIAGNOSIS}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_PNEUMONIA_DIAGNOSIS}
          docker_nvidia: true
          docker_image_name: pneumonia_diagnosis
          docker_container_name: PNEUMONIA_DIAGNOSIS
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  real-time-voice-cloning:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: real-time-voice-cloning
      SERVICE_DIR: services/real-time-voice-cloning
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3 run_voice_cloning_service.py --ssl
      SERVICE_TEST_COMMAND: sleep 30;python3 test_voice_cloning_service.py auto
      SNETD_PORT_MAINNET: 7064
      SNETD_PORT_ROPSTEN: 7065
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_VOICE_CLONING}
          ssh_user_env_var: ${SSH_USER_VOICE_CLONING}
          ssh_host_env_var: ${SSH_HOST_VOICE_CLONING}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_VOICE_CLONING}
          docker_nvidia: true
          docker_image_name: voice_cloning
          docker_container_name: VOICE_CLONING
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  s2vt-video-captioning:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: s2vt-video-captioning
      SERVICE_DIR: services/s2vt-video-captioning
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python run_video_cap_service.py --ssl
      SERVICE_TEST_COMMAND: sleep 20;python test_video_cap_service.py auto
      SNETD_PORT_MAINNET: 7006
      SNETD_PORT_ROPSTEN: 7056
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_S2VT_VIDEO_CAPTIONING}
          ssh_user_env_var: ${SSH_USER_S2VT_VIDEO_CAPTIONING}
          ssh_host_env_var: ${SSH_HOST_S2VT_VIDEO_CAPTIONING}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_S2VT_VIDEO_CAPTIONING}
          docker_nvidia: true
          docker_image_name: s2vt_video_captioning
          docker_container_name: S2VT_VIDEO_CAPTIONING
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  siggraph-colorization:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: siggraph-colorization
      SERVICE_DIR: services/siggraph-colorization
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3 run_colorize_service.py --ssl
      SERVICE_TEST_COMMAND: sleep 20;python3 test_colorize_service.py auto
      SNETD_PORT_MAINNET: 7084
      SNETD_PORT_ROPSTEN: 7085
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_SIGGRAPH_COLORIZATION}
          ssh_user_env_var: ${SSH_USER_SIGGRAPH_COLORIZATION}
          ssh_host_env_var: ${SSH_HOST_SIGGRAPH_COLORIZATION}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_SIGGRAPH_COLORIZATION}
          docker_nvidia: true
          docker_image_name: siggraph_colorization
          docker_container_name: SIGGRAPH_COLORIZATION
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  sound-spleeter:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: sound-spleeter
      SERVICE_DIR: services/sound-spleeter
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3 run_sound_spleeter_service.py --ssl
      SERVICE_TEST_COMMAND: sleep 20;python3 test_sound_spleeter_service.py auto
      SNETD_PORT_MAINNET: 7066
      SNETD_PORT_ROPSTEN: 7067
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_SOUND_SPLEETER}
          ssh_user_env_var: ${SSH_USER_SOUND_SPLEETER}
          ssh_host_env_var: ${SSH_HOST_SOUND_SPLEETER}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_SOUND_SPLEETER}
          docker_nvidia: true
          docker_image_name: sound_spleeter
          docker_container_name: SOUND_SPLEETER
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  yolov3-object-detection:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: yolov3-object-detection
      SERVICE_DIR: services/yolov3-object-detection
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3 run_object_detection_service.py --ssl
      SERVICE_TEST_COMMAND: sleep 20;python3 test_object_detection_service.py auto
      SNETD_PORT_MAINNET: 7007
      SNETD_PORT_ROPSTEN: 7057
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_YOLOv3_OBJECT_DETECTION}
          ssh_user_env_var: ${SSH_USER_YOLOv3_OBJECT_DETECTION}
          ssh_host_env_var: ${SSH_HOST_YOLOv3_OBJECT_DETECTION}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_YOLOv3_OBJECT_DETECTION}
          docker_nvidia: true
          docker_image_name: yolov3_object_detection
          docker_container_name: YOLOv3_OBJECT_DETECTION
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

  zeta36-chess-alpha-zero:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: zeta36-chess-alpha-zero
      SERVICE_DIR: services/zeta36-chess-alpha-zero
      CERTS_DIR: singnet/.certs
      SERVICE_RUN_COMMAND: python3.6 run_alpha_zero_service.py --ssl
      SERVICE_TEST_COMMAND: sleep 20;python3.6 test_alpha_zero_service.py auto
      SNETD_PORT_MAINNET: 7008
      SNETD_PORT_ROPSTEN: 7058
    steps:
      - checkout
      - build_and_deploy:
          domain: ${DOMAIN_CHESS_ALPHA_ZERO}
          ssh_user_env_var: ${SSH_USER_CHESS_ALPHA_ZERO}
          ssh_host_env_var: ${SSH_HOST_CHESS_ALPHA_ZERO}
          infura_api_key: ${INFURA_API_KEY}
          daemon_pk: ${PK_CHESS_ALPHA_ZERO}
          docker_nvidia: true
          docker_image_name: zeta36_chess_alpha_zero
          docker_container_name: CHESS_ALPHA_ZERO
          docker_etcd_host_dir: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_dir: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_DIR}/etcd/

workflows:
  version: 2.1
  build_deploy_dnn_services:
    jobs:
      - cntk-image-recon
#      - deepfakes-faceswap
      - i3d-video-action-recognition
      - places365-scene-recognition
      - pneumonia-diagnosis
      - real-time-voice-cloning
      - s2vt-video-captioning
#      - siggraph-colorization
      - sound-spleeter
      - yolov3-object-detection
      - zeta36-chess-alpha-zero
